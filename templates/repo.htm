{{template "head.htm" .}}
    <main>
      <div class="container">
        <div class="d-flex justify-content-between">
          <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
              <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-door-fill"></i> Home</a></li>
              {{if and .Tree .Root}}
                <li class="breadcrumb-item active" aria-current="page">{{.OrgName}}.{{.RepoName}}</li>
              {{else}}
                <li class="breadcrumb-item"><a href="{{.BranchPath}}">{{.OrgName}}.{{.RepoName}}</a></li>
              {{end}}
              {{range .Breadcrumb}}
                {{if .Last}}
                  <li class="breadcrumb-item active" aria-current="page">{{.Name}}</li>
                {{else}}
                  <li class="breadcrumb-item"><a href="{{.Path}}">{{.Name}}</a></li>
                {{end}}
              {{end}}
            </ol>
          </nav>
          {{if and .Tree .Root}}
            <div style="min-width: 75px">
              <button class="btn btn-sm btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#collapseClone" aria-expanded="false" aria-controls="collapseClone">
                <i class="bi bi-code"></i> Clone
              </button>
            </div>
          {{end}}
        </div>
        <div ref="liveAlertPlaceholder"></div>
        {{if .Tree}}
          {{if .Root}}
            <div class="collapse" id="collapseClone">
              <div class="d-flex justify-content-end">
                <input id="inputClone" ref="inputClone" type="text" class="form-control form-control-sm text-muted" value="{{.GitClone}}">
                <a class="btn btn-sm btn-outline-dark" style="min-width: 100px" @click="copy"><i class="bi bi-clipboard"></i> {[{btnCopy}]}</a>
              </div>
            </div>
          {{end}}
          <div class="list-group">
            {{range .Dir.Entries}}
              <div class="list-group-item list-group-item-action">
                <div class="row">
                  <span class="col-12 col-md-5"><a href="{{.Path}}" class="text-decoration-none">
                    {{if .IsParent}}
                      <div class="text-dark">{{.Name}}</div>
                    {{else}}
                      <i class="bi bi-{{if .IsDir}}folder-fill text-primary{{else if or .IsSubmodule .IsSymlink}}folder-symlink-fill text-warning{{else}}file-earmark text-dark{{end}}"></i> <span class="text-dark">{{.Name}}</span>
                    {{end}}
                  </a></span>
                  <span class="col-6 col-md-4 text-muted">{{.Commit.Message}}</span>
                  <span class="text-end col-6 col-md-3 text-muted">{{.Commit.TimeAgo}}</span>
                </div>
              </div>
            {{end}}
          </div>
          {{if .LoadReadme}}
            <div>
              <iframe src="{{.ReadmePath}}" width="100%" frameborder="0" scrolling="no" @load="resizeIframe"></iframe>
            </div>
          {{end}}
        {{end}}
        {{if .Blob}}
          <div>
            <pre class="line-numbers language-{{.File.Lang}}" data-src="{{.File.RawPath}}"></pre>
          </div>
        {{end}}
      </div>
    </main>

    <script>
      'use strict'
      const { createApp } = Vue
      createApp({
        data() {
          return {
            org: "{{.DefaultOrg}}",
            repo: '',
            btnOpenRepoDisabled: true,
            btnCopy: 'Copy'
          }
        },
        computed: {},
        methods: {
          alert(message, type) {
            this.$refs.liveAlertPlaceholder.innerHTML = [
              `<div class="alert alert-${type} alert-dismissible" role="alert">`,
              `   <div>${message}</div>`,
              '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
              '</div>'
            ].join('')
          },
          change() {
            if (this.org && this.repo) {
              this.btnOpenRepoDisabled = false
            } else {
              this.btnOpenRepoDisabled = true
            }
          },
          newRepo() {
            const that = this
            if (that.org && that.repo) {
              axios.post(`/orgs/${that.org}/repos/${that.repo}/new`,{}).then((res) => {
                if (res.data.Code === -10001) {
                  that.alert('Repository Already Exists', 'danger')
                  setTimeout(() => {
                    window.location.reload()
                  }, 1500)
                } else {
                  that.alert('New Empty Repository Created', 'success')
                  setTimeout(() => {
                    window.location.href = '/'
                  }, 1500)
                }
              }).catch((err) => {
                if (err.response.status === 401) {
                  that.alert('Unauthorized', 'danger')
                  setTimeout(() => {
                    window.location.href = '/signin'
                  }, 1500)
                } else {
                  that.alert('Internal Server Error', 'danger')
                  setTimeout(() => {
                    window.location.reload()
                  }, 1500)
                }
              }).finally(() => {
                bootstrap.Modal.getInstance(that.$refs.modalNewRepo).hide()
              })
            } else {
              that.btnOpenRepoDisabled = true
            }
          },
          resizeIframe(e) {
            const obj = e.currentTarget
            const interval = setInterval(() => {
              obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px'
            }, 200)
            setTimeout(() => {
              clearInterval(interval)
            }, 10000)
          },
          copy() {
            const that = this
            that.$refs.inputClone.select()
            document.execCommand('copy')
            that.$refs.inputClone.blur()
            that.btnCopy = 'Copied'
            setTimeout(() => {
              that.btnCopy = 'Copy'
            }, 1500)
          },
          signout() {
            axios.get('/signout').finally(() => {
              window.location.href = '/'
            })
          }
        },
        created() {},
        mounted() {
          const that = this
          that.$refs.modalNewRepo.addEventListener('hidden.bs.modal', () => {
            that.org = "{{.DefaultOrg}}"
            that.repo = ''
            that.btnOpenRepoDisabled = true
          })
        },
        delimiters: ['{[{', '}]}'],
      }).mount('#app')
    </script>
{{template "foot.htm" .}}