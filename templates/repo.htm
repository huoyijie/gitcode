{{template "head.htm" .}}
    <main>
      <div class="container">
        <div class="d-flex justify-content-between">
          <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
              <li class="breadcrumb-item"><a href="/"><i class="bi bi-house-door-fill"></i> Home</a></li>
              {{if and .Tree .Root}}
                <li class="breadcrumb-item active" aria-current="page">{{.OrgName}}.{{.RepoName}}</li>
              {{else}}
                <li class="breadcrumb-item"><a href="{{.BranchPath}}">{{.OrgName}}.{{.RepoName}}</a></li>
              {{end}}
              {{range .Breadcrumb}}
                {{if .Last}}
                  <li class="breadcrumb-item active" aria-current="page">{{.Name}}</li>
                {{else}}
                  <li class="breadcrumb-item"><a href="{{.Path}}">{{.Name}}</a></li>
                {{end}}
              {{end}}
            </ol>
          </nav>
          {{if and .Tree .Root}}
            <div style="min-width: 75px">
              <button class="btn btn-sm btn-success" type="button" data-bs-toggle="collapse" data-bs-target="#collapseClone" aria-expanded="false" aria-controls="collapseClone">
                <i class="bi bi-code"></i> Clone
              </button>
            </div>
          {{end}}
        </div>
        {{if .Tree}}
          {{if .Root}}
            <div class="collapse" id="collapseClone">
              <div class="d-flex justify-content-end">
                <input id="inputClone" ref="inputClone" type="text" class="form-control form-control-sm text-muted" value="{{.GitClone}}">
                <a class="btn btn-sm btn-outline-dark" style="min-width: 100px" @click="copy"><i class="bi bi-clipboard"></i> {[{btnCopy}]}</a>
              </div>
            </div>
          {{end}}
          <div class="list-group">
            {{range .Dir.Entries}}
              <div class="list-group-item list-group-item-action">
                <a href="{{.Path}}" class="text-decoration-none">
                  {{if .IsParent}}
                    <div class="text-dark">{{.Name}}</div>
                  {{else}}
                    <i class="bi bi-{{if .IsDir}}folder-fill text-primary{{else if or .IsSubmodule .IsSymlink}}folder-symlink-fill text-warning{{else}}file-earmark text-dark{{end}}"></i> <span class="text-dark">{{.Name}}</span>
                  {{end}}
                </a>
              </div>
            {{end}}
          </div>
        {{end}}
        {{if .Blob}}
          <div>
            <pre class="line-numbers language-{{.File.Lang}}" data-src="{{.File.RawPath}}"></pre>
          </div>
        {{end}}
      </div>
      {{if and .Tree .LoadReadme}}
        <div>
          <iframe src="{{.ReadmePath}}" width="100%" frameborder="0" scrolling="no" @load="resizeIframe"></iframe>
        </div>
      {{end}}
    </main>

    <script>
      'use strict'
      const { createApp } = Vue
      createApp({
        data() {
          return {
            org: '{{.DefaultOrg.Name}}',
            repo: '',
            btnCopy: 'Copy'
          }
        },
        computed: {},
        methods: {
          newRepo() {
            if (this.org && this.repo) {
              axios.post(`/orgs/${this.org}/repos/${this.repo}/new`, {
                org: this.org,
                repo: this.repo
              }).then((res) => {
                console.log(res)
                window.location.href = '/'
              }).catch((err) => {
                console.log(err)
              }).finally(() => {
                this.org = ''
                this.repo = ''
              })
            }
          },
          resizeIframe(e) {
            const obj = e.currentTarget
            const interval = setInterval(() => {
              obj.style.height = obj.contentWindow.document.documentElement.scrollHeight + 'px'
            }, 200)
            setTimeout(() => {
              clearInterval(interval)
            }, 10000)
          },
          copy() {
            const that = this
            that.$refs.inputClone.select()
            document.execCommand('copy')
            that.$refs.inputClone.blur()
            that.btnCopy = 'Copied'
            setTimeout(() => {
              that.btnCopy = 'Copy'
            }, 2000)
          }
        },
        created() {},
        delimiters: ['{[{', '}]}'],
      }).mount('#app')
    </script>
{{template "foot.htm" .}}