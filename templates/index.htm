{{template "head.htm" .}}
    <main class="container overflow-auto" style="max-height: 70vh">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item active" aria-current="page"><i class="bi bi-house-door-fill"></i> Home</li>
        </ol>
      </nav>
      <div ref="liveAlertPlaceholder"></div>
      <div class="accordion" id="accordionOrg">
        {{range $index, $element := .Orgs}}
          <div class="accordion-item">
            <h2 class="accordion-header" id="heading-{{$index}}">
              <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse-{{$index}}" aria-expanded="true" aria-controls="collapse-{{$index}}">
                <i class="bi bi-building"></i> {{.Name}}
              </button>
            </h2>
            <div id="collapse-{{$index}}" class="accordion-collapse collapse show" aria-labelledby="heading-{{$index}}" data-bs-parent="#accordionOrg">
              <div class="accordion-body">
                {{range .Repos}}
                  <h4 class="d-inline-block me-2">
                    <span class="badge text-bg-{{if .Empty}}danger{{else}}secondary{{end}}" role="button" @click="openRepo" :data-org="'{{$element.Name}}'" :data-repo="'{{.Name}}'" :data-branch="'{{.DefaultBranch}}'"><i class="bi bi-{{if .Empty}}x{{else}}git{{end}}"></i> {{.Name}}</span>
                  </h4>
                {{end}}
              </div>
            </div>
          </div>
        {{end}}
      </div>
    </main>

    <script>
      'use strict'
      const { createApp } = Vue
      createApp({
        data() {
          return {
            hostname: '{{.Hostname}}',
            org: "{{.DefaultOrg}}",
            repo: '',
            btnOpenRepoDisabled: true
          }
        },
        computed: {},
        methods: {
          alert(message, type) {
            this.$refs.liveAlertPlaceholder.innerHTML = [
              `<div class="alert alert-${type} alert-dismissible" role="alert">`,
              `   <div>${message}</div>`,
              '   <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>',
              '</div>'
            ].join('')
          },
          change() {
            if (this.org && this.repo) {
              this.btnOpenRepoDisabled = false
            } else {
              this.btnOpenRepoDisabled = true
            }
          },
          newRepo() {
            const that = this
            if (that.org && that.repo) {
              axios.post(`/orgs/${that.org}/repos/${that.repo}/new`, {}).then((res) => {
                if (res.data.Code === -10001) {
                  that.alert('Repository Already Exists', 'danger')
                  setTimeout(() => {
                    window.location.reload()
                  }, 1500)
                } else {
                  that.alert('New Empty Repository Created', 'success')
                  setTimeout(() => {
                    window.location.href = '/'
                  }, 1500)
                }
              }).catch((err) => {
                if (err.response.status === 401) {
                  that.alert('Unauthorized', 'danger')
                  setTimeout(() => {
                    window.location.href = '/signin'
                  }, 1500)
                } else {
                  that.alert('Internal Server Error', 'danger')
                  setTimeout(() => {
                    window.location.reload()
                  }, 1500)
                }
              }).finally(() => {
                bootstrap.Modal.getInstance(that.$refs.modalNewRepo).hide()
              })
            } else {
              that.btnOpenRepoDisabled = true
            }
          },
          openRepo(e) {
            const dataset = e.currentTarget.dataset
            const org = dataset.org
            const repo = dataset.repo
            const branch = dataset.branch
            if (branch) {
              window.location.href = `/${org}/${repo}/tree/${branch}`
            } else {
              this.alert(`git clone git@${this.hostname}:${org}/${repo}.git`, 'danger')
            }
          },
          signout() {
            axios.get('/signout').finally(() => {
              window.location.href = '/'
            })
          }
        },
        created() {},
        mounted() {
          const that = this
          that.$refs.modalNewRepo.addEventListener('hidden.bs.modal', () => {
            that.org = "{{.DefaultOrg}}"
            that.repo = ''
            that.btnOpenRepoDisabled = true
          })
        },
        delimiters: ['{[{', '}]}'],
      }).mount('#app')
    </script>
{{template "foot.htm" .}}